@use 'sass:map';

@use '../../styles/theme-tokens/constants' as const;
@use '../../styles/theme-tokens/variables' as var;

// Font size for the badge has to be one level less than its size
$sizes-mapping: (
  'sm': 'xs',
  'md': 'sm',
  'lg': 'md'
);

@mixin size($size, $dimension) {
  :where(.#{$size}) {
    height: $dimension;
    min-width: $dimension;

    @if ($size != 'dot') {
      $font-size: map.get(
        var.$typography,
        'label',
        map.get($sizes-mapping, $size),
        'font-size'
      );
      $line-height: map.get(
        var.$typography,
        'label',
        map.get($sizes-mapping, $size),
        'line-height'
      );

      font-size: calc($font-size - 2px);
      line-height: calc($line-height - 2px);

      & > :where(svg),
      & > span:where([data-pui-component='material-icon']) {
        font-size: $font-size;
      }
    }
  }
}

:where(.badge) {
  display: inline-flex;
  align-items: center;
  justify-content: center;
  width: fit-content;
  text-align: center;
  white-space: nowrap;

  &:not(:where(.dot)):not(:where(.single)) {
    padding-inline: 0.5em;
  }

  :where(svg) {
    height: 1em;
    min-width: 1em;
    width: auto;
  }
}

:where(.invisible) {
  opacity: 0;
}

:where(.outlined) {
  outline: 2px solid var(--pui-background);
}

@each $color in const.$color-names {
  .#{$color} {
    --pui-badge-color: var(--pui-#{$color});
    --pui-badge-on-color: var(--pui-on-#{$color});
    --pui-badge-color-container: var(--pui-#{$color}-container);
    --pui-badge-on-color-container: var(--pui-on-#{$color}-container);
  }
}

:where(.filled) {
  background-color: var(--pui-badge-color);
  color: var(--pui-badge-on-color);
}

:where(.soft) {
  background-color: var(--pui-badge-color-container);
  color: var(--pui-badge-on-color-container);
}

@include size('dot', 0.375rem);
@include size('sm', 1rem);
@include size('md', 1.25rem);
@include size('lg', 1.5rem);
