@use 'sass:map';

@use '../../../styles/particles-ui/variables' as var;

:where(.reset) {
  min-height: min-content;
  padding: 0;
}

:where(.li-interactive) {
  display: flex;
  flex-direction: row;
  gap: 1rem;
  cursor: pointer;
  height: 100%;
  min-height: var(--pui-list-item-min-height);
  width: 100%;
  padding-block: var(--pui-list-item-pd-block);
  padding-inline: var(--pui-list-item-pl) var(--pui-list-item-pr);

  &:hover:not(.disabled):not(:where(.static)) {
    background-color: var(--pui-primary-container-low);
  }

  &:active:not(.disabled):not(:where(.static)) {
    background-color: var(--pui-primary-container);
  }

  &:where(.selected):not(.disabled) {
    background-color: var(--pui-primary-container-low);
  }

  &.disabled {
    // Fallback for color-mix()
    background-color: rgb(
      var(--pui-on-background-channels) / var(--pui-state-disabled)
    );
    background-color: color-mix(
      in oklab,
      var(--pui-on-background) var(--pui-state-disabled),
      transparent
    );
    cursor: not-allowed;

    * {
      // Fallback for color-mix()
      color: rgb(
        var(--pui-on-background-channels) / var(--pui-state-disabled-content)
      );
      color: color-mix(
        in oklab,
        var(--pui-on-background) var(--pui-state-disabled-content),
        transparent
      );
    }
  }
}

:where(.align-items-center) {
  align-items: center;
}

:where(.align-items-flex-start) {
  align-items: flex-start;
}

:where(.align-items-flex-end) {
  align-items: flex-end;
}

:where(.align-items-stretch) {
  align-items: stretch;
}
