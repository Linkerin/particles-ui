@use 'sass:map';

@use '../../styles/theme-tokens/constants' as const;
@use '../../styles/theme-tokens/variables' as var;

@mixin size($size, $dimension, $border-width: 2px, $pd: 2px) {
  $label: (
    'font-size': 2.5rem,
    'line-height': 3.25rem,
    'letter-spacing': 0,
    'font-weight': 500
  ); // xxl values

  @if ($size != 'xxl') {
    $label: map.get(var.$typography, 'label', $size);
  }

  div:where(.#{$size}) {
    height: $dimension;
    min-width: $dimension;
    width: $dimension;

    @each $property, $value in $label {
      #{$property}: $value;
    }

    & :where(svg),
    & span:where([data-pui-component='material-icon']) {
      font-size: map.get($label, 'line-height');
    }

    &:where(.bordered) {
      border-width: $border-width;
      padding: $pd;

      & *[data-pui-component='pui-avatar-img'] {
        border-radius: calc(var(--pui-curr-elem-radius) - $pd - 1px);
      }
    }
  }
}

@layer pui-components {
  // colors
  @each $color in const.$color-names {
    :where(.#{$color}) {
      --pui-avatar-color-container: var(--pui-#{$color}-container-low);
      --pui-avatar-on-color-container: var(--pui-on-#{$color}-container);
      --pui-avatar-color: var(--pui-#{$color});
    }
  }

  :where(.avatar) {
    background: none;
    aspect-ratio: 1 / 1;

    & *:where([data-pui-component='pui-avatar-img']) {
      height: 100%;
      width: 100%;
      object-fit: cover;
    }

    :where(svg) {
      height: 1em;
      min-width: 1em;
      width: auto;
    }
  }

  :where(.avatar-fallback) {
    display: inline-flex;
    align-items: center;
    justify-content: center;
    background-color: var(
      --pui-avatar-color-container,
      var(--pui-background-container)
    );
    color: var(
      --pui-avatar-on-color-container,
      var(--pui-on-background-variant)
    );
    text-align: center;
    text-transform: uppercase;
    user-select: none;
  }

  :where(.bordered) {
    border-color: var(--pui-avatar-color, var(--pui-on-background-variant));
    border-style: solid;
  }

  :where(.disabled) {
    opacity: var(--pui-state-disabled-content, 38%);
  }

  // sizes
  @include size('xs', 1.625rem, 1px, $pd: 1px);
  @include size('sm', 2rem, 1px);
  @include size('md', 2.5rem, 1px);
  @include size('lg', 3rem);
  @include size('xl', 3.5rem);
  @include size('xxl', 5rem, $pd: 3px);
}
