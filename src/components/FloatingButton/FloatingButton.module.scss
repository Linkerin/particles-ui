@use 'sass:map';

@use '../../styles/theme-tokens/constants' as const;
@use '../../styles/theme-tokens/variables' as var;

@layer pui-base, pui-components, pui-utils;

// Font size for these buttons has to be 1 step more than the size
$sizes-mapping: (
  'sm': 'md',
  'md': 'lg',
  'lg': 'xl'
);

@mixin size($size, $dimension, $pd, $loading-border-width: null) {
  $font: map.get(var.$typography, 'label', map.get($sizes-mapping, $size));
  $icon-size: $dimension - ($pd * 2);

  :where(.#{$size}) {
    height: $dimension;
    padding: $pd;

    // Button label styling
    @each $property, $value in $font {
      #{$property}: $value;
    }

    & > span:where([data-pui-component='material-icon']),
    & > span:where([data-pui-component='fab-load-spinner']),
    & > svg {
      font-size: $icon-size;
    }

    @if ($size == 'lg' and $loading-border-width != null) {
      & > span:where([data-pui-component='fab-load-spinner']) > span {
        border-width: $loading-border-width;
      }
    }
  }
}

@layer pui-components {
  // colors
  @each $color in const.$color-names {
    :where(.#{$color}) {
      --pui-fab-color: var(--pui-#{$color}-darker);
      --pui-fab-color-channels: var(--pui-#{$color}-darker-channels);
      --pui-fab-on-color-container: var(--pui-on-#{$color}-container);
      --pui-fab-color-container: var(--pui-#{$color}-container);
      --pui-fab-color-container-channels: var(
        --pui-#{$color}-container-channels
      );
    }
  }

  :where(.background) {
    --pui-fab-color: var(--pui-on-background-variant);
    --pui-fab-color-channels: var(--pui-on-background-variant-channels);
    --pui-fab-on-color-container: var(--pui-primary-darker);
    --pui-fab-color-container: var(--pui-background-container);
    --pui-fab-color-container-channels: var(
      --pui-background-container-channels
    );
  }

  :where(.fab) {
    display: flex;
    align-items: center;
    justify-content: center;
    gap: var(--pui-gap-md, 0.5rem);
    background: none;
    border: none;
    box-shadow: var(--pui-elevation-3);
    cursor: pointer;
    width: fit-content;
    white-space: nowrap;

    svg {
      height: 1em;
      min-width: 1em;
      width: auto;
    }

    & > span:where([data-pui-component='fab-load-spinner']) > :where(span) {
      border-width: 1px;
    }

    &:hover:not(:where(.lowered)):not(:where(.loading)) {
      box-shadow: var(--pui-elevation-4);
    }

    &:active:not(:where(.lowered)):not(:where(.loading)) {
      box-shadow: var(--pui-elevation-3);
    }

    &.loading {
      box-shadow: var(--pui-elevation-1);
      cursor: not-allowed;
      opacity: 50%;
    }

    &:disabled,
    &:disabled:hover,
    &:disabled:active {
      background-color: rgb(var(--pui-on-background-channels) / 0.12);
      box-shadow: var(--pui-elevation-1);
      color: rgb(var(--pui-on-background-channels) / 0.38);
      cursor: not-allowed;
    }
  }

  :where(.lowered):not(:where(.loading)):not(:disabled) {
    &:hover {
      box-shadow: var(--pui-elevation-2);
    }

    &,
    &:active {
      box-shadow: var(--pui-elevation-1);
    }
  }

  :where(.fab):not(:where(.uncolored)) {
    background-color: var(--pui-fab-color-container);
    color: var(--pui-fab-on-color-container);

    &:hover:not(:where(.loading)) {
      // Fallback for color-mix()
      background-color: rgb(var(--pui-fab-color-channels) / 0.2);

      background-color: color-mix(
        in oklab,
        var(--pui-fab-color-container),
        var(--pui-fab-color) var(--pui-state-hover, 0.08)
      );
    }

    &:active:not(:where(.loading)) {
      // Fallback for color-mix()
      background-color: rgb(var(--pui-fab-color-channels) / 0.24);

      background-color: color-mix(
        in oklab,
        var(--pui-fab-color-container),
        var(--pui-fab-color) var(--pui-state-press, 0.12)
      );
    }
  }

  @include size('sm', 2.5rem, $pd: 0.5rem);
  @include size('md', 3.5rem, $pd: 1rem);
  @include size('lg', 6rem, $pd: 1.75rem, $loading-border-width: 2px);
}
